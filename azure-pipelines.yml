# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: windows-latest

resources:
  - repo: self
  
variables:
 buildConfiguration: 'Release'

stages:
  - stage: Build
    displayName: Build App
    jobs: 
      - job: Build
        displayName: Build
        pool:
          vmImage: 'windows-latest'
        
        steps:
          - task: UseDotNet@2
            displayName: 'Install .NET Core SDK'
            inputs:
              version: 6.0.x
              performMultiLevelLookup: true
              includePreviewVersions: true # Required for preview versions
              
          - task: DotNetCoreCLI@2
            inputs:
              command: 'restore'
              feedsToUse: 'select'
              vstsFeed: 'my-vsts-feed'
          - task: DotNetCoreCLI@2
            inputs:
              command: 'build'
              projects: '**/*.csproj'
              arguments: '--configuration $(buildConfiguration)'
            displayName: 'dotnet build $(buildConfiguration)'
              
          - task: DotNetCoreCLI@2
            inputs:
              command: 'publish'
              publishWebProjects: true
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
              zipAfterPublish: True
              
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Pipeline.Workspace)'
              artifact: 'TerraApp'
              publishLocation: 'pipeline'
        variables:
          - group: TerraformEnvVariables
  - stage:
    displayName: Provision
    jobs:
      - job:
        displayName: Provision
        pool:
            vmImage: 'windows-latest'
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Visual Studio Enterprise Subscription (795e5dad-6e94-41f8-af43-4321cd00cc8b)'
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: |
                Write-Host "##vso[task.setvariable variable=CLIENT_ID]$($env:servicePrincipalId)"
                
                Write-Host "##vso[task.setvariable variable=CLIENT_SECRET]$($env:servicePrincipalKey)"
                
                Write-Host "##vso[task.setvariable variable=TENANT_ID]$($env:tenantId)"
              addSpnToEnvironment: true
              useGlobalConfig: true
          - task: AzurePowerShell@5
            inputs:
              azureSubscription: 'Visual Studio Enterprise Subscription (795e5dad-6e94-41f8-af43-4321cd00cc8b)'
              ScriptType: 'InlineScript'
              Inline: |
                $username = "$(CLIENT_ID)"
                $password = "$(CLIENT_SECRET)"
                $tenantId = "$(TENANT_ID)"
                
                az login --service-principal --username  $username --password $password --tenant $tenantId
              preferredAzurePowerShellVersion: '3.1.0'
          
          
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: 'latest'
              downloadUrl: 'https://releases.hashicorp.com/terraform/1.1.2/terraform_1.1.2_windows_amd64.zip'
          
          - task: AzureCLI@2
            displayName: "Terraform"
            inputs:
              azureSubscription:  'Visual Studio Enterprise Subscription (795e5dad-6e94-41f8-af43-4321cd00cc8b)'
              scriptType: bash
              addSpnToEnvironment: true
              scriptLocation: inlineScript
              inlineScript: |
                export CLIENT_ID=$(CLIENT_ID)
                export CLIENT_SECRET=$(CLIENT_SECRET)
                export TENANT_ID=$(TENANT_ID)
                terraform init -reconfigure \
                -backend-config="storage_account_name=$STORAGE_ACCOUNT_NAME" \
                -backend-config="container_name=$CONTAINER_NAME" \
                -backend-config="key=$KEY" \
                -backend-config="resource_group_name=$RESOURCE_GROUP_NAME"
            env:
              STORAGE_ACCOUNT_NAME: $(STORAGE_ACCOUNT_NAME)
              CONTAINER_NAME:       $(CONTAINER_NAME)
              KEY:   $(KEY)
              RESOURCE_GROUP_NAME:       $(RESOURCE_GROUP_NAME)  
           
          - bash: terraform apply -auto-approve 
            displayName: Terraform Apply
            env:
              SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
              CLIENT_ID:       $(CLIENT_ID)
              CLIENT_SECRET:   $(CLIENT_SECRET)
              TENANT_ID:       $(TENANT_ID)      
          
  
              
            
