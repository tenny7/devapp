# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: windows-latest

resources:
  - repo: self
  
variables:
 buildConfiguration: 'Release'

stages:
  - stage: Build
    displayName: Build App
    jobs: 
      - job: Build
        displayName: Build
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          - task: UseDotNet@2
            displayName: 'Install .NET Core SDK'
            inputs:
              version: 6.0.x
              performMultiLevelLookup: true
              includePreviewVersions: true # Required for preview versions
              
          - task: DotNetCoreCLI@2
            inputs:
              command: 'restore'
              feedsToUse: 'select'
              vstsFeed: 'my-vsts-feed'
          - task: DotNetCoreCLI@2
            inputs:
              command: 'build'
              projects: '**/*.csproj'
              arguments: '--configuration $(buildConfiguration)'
            displayName: 'dotnet build $(buildConfiguration)'
              
          - task: DotNetCoreCLI@2
            inputs:
              command: 'publish'
              publishWebProjects: true
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
              zipAfterPublish: True
              
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Pipeline.Workspace)'
              artifact: 'TerraApp'
              publishLocation: 'pipeline'
          
  - stage: Provisioning
    displayName: 'Terraform Provisioning on Azure'
    dependsOn: Build
    jobs:
      - job: Provision
        displayName: 'Provisioning App services'
        pool:
          vmImage: 'windows-latest'
        variables:
          - group: TerraformEnvVariables
        steps:
          - bash: |
              terraform init \
                -backend-config="storage_account_name=$TF_STATE_BLOB_ACCOUNT_NAME" \
                -backend-config="container_name=$TF_STATE_BLOB_CONTAINER_NAME" \
                -backend-config="key=$TF_STATE_BLOB_FILE" \
                -backend-config="resource_group_name=$(TF_STATE_RESOURCE_GROUP_NAME)"
            displayName: Terraform Init
            env:
              TF_STATE_BLOB_ACCOUNT_NAME: $(TF_STATE_BLOB_ACCOUNT_NAME)
              TF_STATE_BLOB_CONTAINER_NAME: $(TF_STATE_BLOB_CONTAINER_NAME)
              TF_STATE_BLOB_FILE: $(TF_STATE_BLOB_FILE)
              TF_STATE_RESOURCE_GROUP_NAME: $(TF_STATE_RESOURCE_GROUP_NAME)
           

          - bash: terraform apply -auto-approve 
            displayName: Terraform Apply
            env:
              SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
              CLIENT_ID:       $(CLIENT_ID)
              CLIENT_SECRET:   $(CLIENT_SECRET)
              TENANT_ID:       $(TENANT_ID)

              
            
