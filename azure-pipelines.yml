# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: windows-latest

variables:
 buildConfiguration: 'Release'

stages:
  - stage: Build
    displayName: Build App
    jobs: 
      - job: Build
        displayName: Build
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          - task: UseDotNet@2
            displayName: 'Install .NET Core SDK'
            inputs:
              version: 6.0.x
              performMultiLevelLookup: true
              includePreviewVersions: true # Required for preview versions
              
          - task: DotNetCoreCLI@2
            inputs:
              command: 'restore'
              feedsToUse: 'select'
              vstsFeed: 'my-vsts-feed'
          - task: DotNetCoreCLI@2
            inputs:
              command: 'build'
              projects: '**/*.csproj'
              arguments: '--configuration $(buildConfiguration)'
            displayName: 'dotnet build $(buildConfiguration)'
              
          - task: DotNetCoreCLI@2
            inputs:
              command: 'publish'
              publishWebProjects: true
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
              zipAfterPublish: True
              
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Pipeline.Workspace)'
              artifact: 'TerraApp'
              publishLocation: 'pipeline'
          
  - stage: Provisioning
    displayName: 'Terraform Provisioning on Azure'
    dependsOn: Build
    jobs:
      - job: Provision
        displayName: 'Provisioning App services'
        pool:
          vmImage: 'windows-latest'
        variables:
          - group: TerraformEnvVar
        steps:
          - task: TerraformCLI@0
            inputs:
              command: 'init'
              commandOptions: '-reconfigure'
              backendType: 'azurerm'
              backendServiceArm: 'Visual Studio Enterprise Subscription (795e5dad-6e94-41f8-af43-4321cd00cc8b)'
              backendAzureRmResourceGroupName: 'terra-state-stor-rg'
              backendAzureRmStorageAccountName: 'terrastorr'
              backendAzureRmContainerName: 'terracontainer'
              backendAzureRmKey: 'terraform.tfstate'
              allowTelemetryCollection: true
          - task: TerraformCLI@0
            inputs:
              command: 'apply'
              environmentServiceName: 'Visual Studio Enterprise Subscription (795e5dad-6e94-41f8-af43-4321cd00cc8b)'
              commandOptions: '-auto-approve'
              allowTelemetryCollection: true

            name: 'RunTerraform'
            displayName: 'Run Terraform'
            env:
              CLIENT_ID: $(CLIENT_ID)
              CLIENT_SECRET: $(CLIENT_SECRET)
              TENANT_ID: $(TENANT_ID)
              SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)

              
            
