# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main
- master

pool:
  vmImage: 'ubuntu-latest'

resources:
  - repo: self
  
variables:
  - group: TerraformEnvVariables

stages:
  - stage: Build
    displayName: Build App
    jobs: 
      - job: Build
        displayName: Build
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          - task: UseDotNet@2
            displayName: 'Install .NET Core SDK'
            inputs:
              version: 6.0.x
              performMultiLevelLookup: true
              includePreviewVersions: true # Required for preview versions
              
          - task: DotNetCoreCLI@2
            inputs:
              command: 'restore'
              feedsToUse: 'select'
              vstsFeed: 'my-vsts-feed'
          - task: DotNetCoreCLI@2
            inputs:
              command: 'build'
              projects: '**/*.csproj'
              arguments: '--configuration Release'
            displayName: 'dotnet build Release'
              
          - task: DotNetCoreCLI@2
            inputs:
              command: 'publish'
              publishWebProjects: true
              arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
              zipAfterPublish: True
              
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Pipeline.Workspace)'
              artifact: 'TerraApp'
              publishLocation: 'pipeline'
        
  - stage:
    displayName: Provision
    jobs:
      - job:
        displayName: Provision
        pool:
            vmImage: 'ubuntu-latest'
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: 'latest'
    # init
          # Bash
          # Run a Bash script on macOS, Linux, or Windows
          - task: TerraformCLI@0
            displayName: Initialize Terraform
            env:
              ARM_SAS_TOKEN: $(ARM_SAS_TOKEN)
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              commandOptions: '-backend-config=storage_account_name=$(STORAGE_ACCOUNT_NAME) -backend-config=container_name=$(CONTAINER_NAME) -backend-config=key=$(KEY)'
              backendType: 'selfConfigured'
          - task: TerraformCLI@0
            displayName: Init Terraform Deployment
            env:
              ARM_SAS_TOKEN: $(ARM_SAS_TOKEN)
              ARM_SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
              ARM_CLIENT_ID:       $(CLIENT_ID)
              ARM_CLIENT_SECRET:   $(CLIENT_SECRET)
              ARM_TENANT_ID:       $(TENANT_ID)
     
                      
  - stage: Plan
    displayName: Plan
    jobs:
      - job: plan
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: 'latest'

          - task: TerraformCLI@0
            displayName: Initialize Terraform
            env:
              ARM_SAS_TOKEN: $(ARM_SAS_TOKEN)
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              commandOptions: '-backend-config=storage_account_name=$(STORAGE_ACCOUNT_NAME) -backend-config=container_name=$(CONTAINER_NAME) -backend-config=key=$(KEY)'
              backendType: 'selfConfigured'
          
          - task: AzureCLI@2
            inputs:
                azureSubscription: 'MyServicePrincipleConn'
                scriptType: 'pscore'
                scriptLocation: 'inlineScript'
                inlineScript: |
                         az login
                         az account list
                         az account set --subscription="$(SUBSCRIPTION_ID)"
                         az ad sp create-for-rbac --role="Contributor" --scopes="/subscriptions/$(SUBSCRIPTION_ID)"
                         az login --service-principal -u $(CLIENT_ID) -p $(CLIENT_SECRET) --tenant $(TENANT_ID)

                useGlobalConfig: true
                workingDirectory: '$(System.DefaultWorkingDirectory)'
            displayName: Az Cli Task Terraform plan

          - bash: terraform plan
          
          
          # - bash: export ARM_USE_MSI=true ARM_TENANT_ID=$(TENANT_ID)|
          #         az login --identity --username $(MSI)
          #         az login --service-principal --username <APP_ID> --password <PASSWORD> --tenant <TENANT_ID>
          #         terraform plan
            
          


          # - task: Terraform@2
          #   inputs:
          #     TemplatePath: $(System.DefaultWorkingDirectory)
          #     Arguments: 'plan'
          #     InstallTerraform: true
          #     UseAzureSub: true
          #     ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
          #     ConnectedServiceNameARM: 'MyServicePrincipleConn'
          #     ManageState: true
          #     SpecifyStorageAccount: true
          #     StorageAccountResourceGroup: 'terra-state-stor-rg'
          #     StorageAccountRM: 'terrastorr'
          #     StorageContainerName: 'terracontainer'
          #   env:
          #     ARM_SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
          #     ARM_CLIENT_ID:       $(CLIENT_ID)
          #     ARM_CLIENT_SECRET:   $(CLIENT_SECRET)
          #     ARM_TENANT_ID:       $(TENANT_ID)
              
          # - task: TerraformCLI@0
          #   displayName: Plan Terraform
          #   env:
          #     ARM_SAS_TOKEN: $(ARM_SAS_TOKEN)
          #   inputs:
          #     command: 'plan'
          #     workingDirectory: '$(System.DefaultWorkingDirectory)'
          #     # commandOptions: '-backend-config=arm_subscription_id=$(SUBSCRIPTION_ID) -backend-config=arm_client_id=$(CLIENT_ID) -backend-config=arm_client_secret=$(CLIENT_SECRET) -backend-config=arm_tenant_id=$(TENANT_ID)'
          #     backendType: 'selfConfigured'
          

      

  - stage: Approve
    displayName: Approve
    jobs: 
      - job: approve
        displayName: Wait for approval
        pool: server
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 60
            inputs:
              notifyUsers: 'ovie.tennyson@outlook.com'
              instructions: 'Review the plan in the next hour'

  - stage: Apply
    displayName: Apply
    jobs:
      - job: apply
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: 'latest'
          - task: TerraformCLI@0
            displayName: Initialize Terraform
            env:
              ARM_SAS_TOKEN: $(ARM_SAS_TOKEN)
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              commandOptions: '-backend-config=storage_account_name=$(STORAGE_ACCOUNT_NAME) -backend-config=container_name=$(CONTAINER_NAME) -backend-config=key=$(KEY)'
              backendType: 'selfConfigured'
          - task: TerraformCLI@0
            displayName: Apply Terrafirm Deployment
            env:
              ARM_SAS_TOKEN: $(ARM_SAS_TOKEN)
              ARM_SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
              ARM_CLIENT_ID:       $(CLIENT_ID)
              ARM_CLIENT_SECRET:   $(CLIENT_SECRET)
              ARM_TENANT_ID:       $(TENANT_ID)
            inputs:
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              commandOptions: '-auto-approve'
            

              
          
  
              
            
