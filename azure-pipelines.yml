# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

resources:
  - repo: self
  
variables:
  - group: TerraformEnvVariables

stages:
  - stage: Build
    displayName: Build App
    jobs: 
      - job: Build
        displayName: Build
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          - task: UseDotNet@2
            displayName: 'Install .NET Core SDK'
            inputs:
              version: 6.0.x
              performMultiLevelLookup: true
              includePreviewVersions: true # Required for preview versions
              
          - task: DotNetCoreCLI@2
            inputs:
              command: 'restore'
              feedsToUse: 'select'
              vstsFeed: 'my-vsts-feed'
          - task: DotNetCoreCLI@2
            inputs:
              command: 'build'
              projects: '**/*.csproj'
              arguments: '--configuration Release'
            displayName: 'dotnet build Release'
              
          - task: DotNetCoreCLI@2
            inputs:
              command: 'publish'
              publishWebProjects: true
              arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
              zipAfterPublish: True
              
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Pipeline.Workspace)'
              artifact: 'TerraApp'
              publishLocation: 'pipeline'
        
  - stage:
    displayName: Provision
    jobs:
      - job:
        displayName: Provision
        pool:
            vmImage: 'ubuntu-latest'
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: 'latest'
    # init
          # Bash
          # Run a Bash script on macOS, Linux, or Windows
          - task: Bash@3
            inputs:
              targetType:  'inline'
              #filePath: # Required when targetType == FilePath
              arguments: 
              script: 'terraform init -reconfigure' # Required when targetType == inline
              workingDirectory: '$(System.DefaultWorkingDirectory)' 
              #failOnStderr: false # Optional
              #noProfile: true # Optional
              #noRc: true # Optional  
          
          # - bash: terraform init 
          #   displayName: Bash Command
          #   env:
          #      ARM_SAS_TOKEN: $(ARM_SAS_TOKEN)
          #   workingDirectory: '$(System.DefaultWorkingDirectory)' 
                      
  - stage: Plan
    displayName: Plan
    jobs:
      - job: plan
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: 'latest'
          - task: TerraformCLI@0
            displayName: Initialize Terraform
            env:
              ARM_SAS_TOKEN: $(sas_token)
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              commandOptions: 'backend-config=storage_account_name=$(STORAGE_ACCOUNT_NAME) -backend-config=container_name=$(CONTAINER_NAME) -backend-config=key=$(KEY)'
              backendType: 'selfConfigured'
          - task: TerraformCLI@0
            displayName: Plan Terrafirm Deployment
            env:
              ARM_SAS_TOKEN: $(ARM_SAS_TOKEN)
              SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
              CLIENT_ID:       $(CLIENT_ID)
              CLIENT_SECRET:   $(CLIENT_SECRET)
              TENANT_ID:       $(TENANT_ID)
            inputs:
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
  - stage: Approve
    displayName: Approve
    jobs: 
      - job: approve
        displayName: Wait for approval
        pool: server
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 60
            inputs:
              notifyUsers: 'ovie.tennyson@outlook.com'
              instructions: 'Review the planin the next hour'

  - stage: Apply
    displayName: Apply
    jobs:
      - job: apply
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: 'latest'
          - task: TerraformCLI@0
            displayName: Initialize Terraform
            env:
              ARM_SAS_TOKEN: $(ARM_SAS_TOKEN)
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              commandOptions: 'backend-config=storage_account_name=$(STORAGE_ACCOUNT_NAME) -backend-config=container_name=$(CONTAINER_NAME) -backend-config=key=$(KEY)'
              backendType: 'selfConfigured'
          - task: TerraformCLI@0
            displayName: Apply Terrafirm Deployment
            env:
              ARM_SAS_TOKEN: $(ARM_SAS_TOKEN)
              SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
              CLIENT_ID:       $(CLIENT_ID)
              CLIENT_SECRET:   $(CLIENT_SECRET)
              TENANT_ID:       $(TENANT_ID)
            inputs:
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              commandOptions: '-auto-approve'
            

              
          
  
              
            
